import 'dart:io';
import 'dart:typed_data';

import 'package:subtitle/subtitle.dart';

class SubtitleUtil {
  String generateSRT(List<Subtitle> subtitles) {
    final buffer = StringBuffer();
    int count = 1;
    for (final subtitle in subtitles) {
      final start = subtitle.start;
      final end = subtitle.end;
      final text = subtitle.data;

      buffer.write('$count\n');
      buffer.write('${formatDuration(start)} --> ${formatDuration(end)}\n');
      buffer.write('$text\n\n');
      count++;
    }

    return buffer.toString();
  }

  String genereteASS(List<Subtitle> subtitles) {
    final buffer = StringBuffer();
    int count = 1;
    buffer.write('[Script Info]\n');
    buffer.write('Title: Generated by Subtitle Editor\n');
    buffer.write('ScriptType: v4.00+\n');
    buffer.write('WrapStyle: 0\n');
    buffer.write('ScaledBorderAndShadow: yes\n');
    buffer.write('YCbCr Matrix: TV.601\n');
    buffer.write('PlayResX: 1920\n');
    buffer.write('PlayResY: 1080\n');
    buffer.write('Collisions: Normal\n');
    buffer.write('Timer: 100.0000\n');
    buffer.write('\n');
    buffer.write('[V4+ Styles]\n');
    buffer.write(
        'Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n');
    buffer.write(
        'Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,1,1,0,2,10,10,10,1\n');
    buffer.write('\n');
    buffer.write('[Events]\n');
    buffer.write(
        'Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n');

    for (final subtitle in subtitles) {
      final start = subtitle.start;
      final end = subtitle.end;
      final text = subtitle.data;

      buffer.write(
          'Dialogue: 0,${formatDuration(start)},${formatDuration(end)},Default,,0,0,0,,${text.replaceAll('\n', '\\N')}\n');

      count++;
    }

    return buffer.toString();
  }

  String formatDuration(Duration duration) {
    final hours = duration.inHours.toString().padLeft(2, '0');
    final minutes = (duration.inMinutes % 60).toString().padLeft(2, '0');
    final seconds = (duration.inSeconds % 60).toString().padLeft(2, '0');
    final milliseconds =
        (duration.inMilliseconds % 1000).toString().padLeft(3, '0');
    return '$hours:$minutes:$seconds,$milliseconds';
  }
}
